---
syntax: bash
tags: [ malware ]
---
# Information taken from: https://zeltser.com/media/docs/analyzing-malicious-document-files.pdf

# General Approach to Document Analysis
1. Examine the document for anomalies, such as risky tags, scripts, and embedded artifacts.
2. Locate embedded code, such as shellcode, macros, JavaScript, or other suspicious objects.
3. Extract suspicious code or objects from the file.
4. If relevant, deobfuscate and examine macros, JavaScript, or other embedded code.
5. If relevant, emulate, disassemble and/or debug shellcode that you extracted from the document.
6. Understand the next steps in the infection chain.

# Microsoft Office Format Notes
- Binary Microsoft Office document files (.doc, .xls, etc.) use the OLE2 (a.k.a. Structured Storage) format.
- SRP streams in OLE2 documents sometimes store a cached version of earlier VBA macro code.
- OOXML document files (.docx, .xlsm, etc.) supported by Microsoft Office are compressed zip archives.
- VBA macros in OOXML documents are stored inside an OLE2 binary file, which is within the zip archive.
- Excel supports XLM macros that are embedded as formulas in sheets without the OLE2 binary file.
- RTF documents don’t support macros but can contain malicious embedded files and objects.

# Run REMnux version built on top of Ubuntu 20.04 (Focal)
docker run --rm -it -u remnux remnux/remnux-distro:focal bash

# Run REMnux version built on top of Ubuntu 20.04 (Focal) w/ local directory
docker run --rm -it -u remnux -v <local_directory>:/home/remnux/files remnux/remnux-distro bash

# SSH and Graphical Interface Access
docker run -d -p 22:22 remnux/remnux-distro:focal

# Useful MS Office File Analysis Commands
# Examine contents of OOXML file file.pptx
zipdump.py file.pptx

# Extract file with index 3 from file.pptx to STDOUT
zipdump.py file.pptx -s 3 -d

# Locate and extract macros from file.xlsm
olevba file.xlsm

# List all OLE2 streams present in file.xls
oledump.py file.xls -i

# Extract VBA source code from stream 3 in file.xls
oledump.py file.xls -s 3 -v

# Format XML file supplied via STDIN for easier analysis
xmldump.py pretty

# Find obfuscated URLs in file.xls macros
oledump.py file.xls -p plugin_http_heuristics

# Emulate the execution of macros in file.doc to analyze them
vmonkey file.doc

# Remove the password prompt from macros in file.ppt
evilclippy -uu file.ppt

# Decrypt outfile.docm using specified password to create outfile.docm
msoffcrypto-tool infile.docm outfile.docm -p

# Disassemble VBA-stomped p-code macro from file.doc
pcodedmp file.doc

# Decompile VBA-stomped p-code macro from file.doc
pcode2code file.doc

# Extract objects embedded into RTF file.rtf
rtfobj.py file.rtf

# List groups and structure of RTF file file.rtf
rtfdump.py file.rtf

# Examine objects in RTF file file.rtf
rtfdump.py file.rtf -O

# Extract hex contents from group in RTF file file.rtf
rtfdump.py file.rtf -s 5 -H -d

# Deobfuscate XLM (Excel 4) macros in file.xlsm
xlmdeobfuscator --file file.xlsm

# Risky PDF Keywords
- /OpenAction and /AA specify the script or action to run automatically.
- /JavaScript, /JS, /AcroForm, and /XFA can specify JavaScript to run.
- /URI accesses a URL, perhaps for phishing.
- /SubmitForm and /GoToR can send data to URL.
- /ObjStm can hide objects inside an object stream.

# Useful PDF File Analysis Commands
# Display risky keywords present in file file.pdf
pdfid.py file.pdf -n

# Show stats about keywords. Add “-O” to include object streams
pdf-parser.py file.pdf -a

# Display contents of object id. Add “-d” to dump object’s stream
pdf-parser.py file.pdf -o id

# Display objects that reference object id
pdf-parser.py file.pdf -r id

# Decrypt infile.pdf using password pass to create outfile.pdf
qpdf --password=pass --decrypt infile.pdf outfile.pdf

# Shellcode and Other Analysis Commands
# Locate shellcode patterns inside the binary file file.bin
xorsearch -W -d 3 file.bin

# Emulate execution of shellcode in file.bin. Use “/off” to specify offset
scdbgc /f file.bin

# Execute shellcode in file.bin to observe behavior in an isolated lab
runsc32 -f file.bin -n

# List Base64-encoded strings present in file file.txt
base64dump.py file.txt

# Convert numbers that represent characters in file to a string
numbers-to-string.py file

# Additional Document Analysis Tools
# Deobfuscate JavaScript that you extract from document files
- https://spidermonkey.dev/
- https://learn.microsoft.com/en-us/windows-server/administration/windows-commands/cscript
- https://github.com/CapacitorSet/box-js (Installed in remnux)

- Use the debugger built into Microsoft Office to deobfuscate macros in an isolated lab
- Use https://gist.githubusercontent.com/mattifestation/e179218d88b5f100b0edecdec453d9be/raw/2329bda456b5b8e2f973cc5dc026b6fc221dad79/AMSIScriptContentRetrieval.ps1 to observe Microsoft Office execute macros in an isolated lab
- Some automated analysis sandboxes (https://zeltser.com/automated-malware-analysis/) can analyze aspects of malicious document files